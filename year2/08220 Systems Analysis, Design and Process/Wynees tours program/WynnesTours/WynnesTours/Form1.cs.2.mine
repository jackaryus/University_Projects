using DatabaseLibrary;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace WynnesTours
{
    public partial class MainForm : Form
    {
        // Creating a new instance of WynneDatabase, in order to access the 
        // methods within it, in a different class
        WynneDatabase l = new WynneDatabase();

        List<Tour> tours;
        List<Customer> customers;
        List<Coach> coaches;
        List<Ticket> tickets;
        public MainForm()
        {
            InitializeComponent();

            // Shows what tours and what coaches exists at the outset
            tours = l.GetTours(DateTime.Now.AddYears(-10), DateTime.Now.AddYears(9), false);
            customers = l.GetCustomers(null);
            coaches = l.GetCoaches();
            tickets = l.GetTicketsForTour(1);

            // Showing the lists in their respective listboxes
            listBoxTours.Items.Clear();
            for (int i = 0; i < tours.Count; i++)
            {
                listBoxTours.Items.Add(tours[i].Title);
            }

            listBoxCustomers.Items.Clear();
            for (int i = 0; i < customers.Count; i++)
            {
                listBoxCustomers.Items.Add("Name: " + customers[i].Title + " " + customers[i].FirstName + " " + customers[i].Surname + " ID: " + customers[i].ID);
            }

            listBoxCoaches.Items.Clear();
            for (int i = 0; i < coaches.Count; i++)
            {
                listBoxCoaches.Items.Add("ID: " + coaches[i].ID + " Reg: " + coaches[i].RegistrationNumber + " Seats: " + coaches[i].NumberOfSeats);
            }

            listBoxTickets.Items.Clear();
            for (int i = 0; i < tickets.Count; i++)
            {
                listBoxTickets.Items.Add("ID: " + tickets[i].ID + " Sold: " + tickets[i].IsSold + " Reserved: " + tickets[i].IsReserved + " Reservation Expires: " + tickets[i].ReservationExpiryDate + " Price: " + tickets[i].SalePrice + " Tour ID: " + tickets[i].TourID);
            }

        }

        #region Tour

        // All tour methods
        private void buttonCreateTour_Click(object sender, EventArgs e)
        {
            try
            {
                l.CreateTour(textBoxTourName.Text, richTextBoxTourDescription.Text, dateTimePickerTourDate.Value, int.Parse(textBoxCoachID.Text), double.Parse(textBoxBaseTicketPrice.Text));
                tours = l.GetTours(DateTime.Now.AddYears(-10), DateTime.Now.AddYears(9), false);
                listBoxTours.Items.Clear();
                for (int i = 0; i < tours.Count; i++)
                {
                    listBoxTours.Items.Add(tours[i].Title);
                }
                MessageBox.Show("Tour successfully created!");
            }
            catch (Exception Ex)
            {
                MessageBox.Show(Ex.ToString());
            }
        }

        private void buttonEditTour_Click(object sender, EventArgs e)
        {
            try
            {
                l.ModifyTour(int.Parse(TourIDTB.Text),textBoxTourName.Text, richTextBoxTourDescription.Text, dateTimePickerTourDate.Value, int.Parse(textBoxCoachID.Text), double.Parse(textBoxBaseTicketPrice.Text));
                tours = l.GetTours(DateTime.Now.AddYears(-10), DateTime.Now.AddYears(9), false);
                listBoxTours.Items.Clear();
                for (int i = 0; i < tours.Count; i++)
                {
                    listBoxTours.Items.Add(tours[i].Title);
                }
                MessageBox.Show("Tour successfully Edited!");
            }
            catch (Exception Ex)
            {
                MessageBox.Show(Ex.ToString());
            }
        }

        private void buttonDeleteTour_Click(object sender, EventArgs e)
        {
            try
            {
                l.DeleteTour(int.Parse(TourIDTB.Text));

                tours = l.GetTours(DateTime.Now.AddYears(-10), DateTime.Now.AddYears(9), false);
                listBoxTours.Items.Clear();
                for (int i = 0; i < tours.Count; i++)
                {
                    listBoxTours.Items.Add(tours[i].Title);
                }
                MessageBox.Show("Tour successfully Deleted!");
            }
            catch (Exception Ex)
            {
                MessageBox.Show(Ex.ToString());
            }
        }
        #endregion

        #region Customer

        // All customer methods
        private void buttonCreateCustomer_Click(object sender, EventArgs e)
        {
            try
            {
                l.AddCustomer(textBoxTitle.Text, textBoxForename.Text, textBoxSurname.Text, textBoxAddress.Text, textBoxEmail.Text, textBoxTelephoneNo.Text);

                customers = l.GetCustomers(null);
                listBoxCustomers.Items.Clear();
                for (int i = 0; i < customers.Count; i++)
                {
                    listBoxCustomers.Items.Add("Name: " + customers[i].Title + " " + customers[i].FirstName + " " + customers[i].Surname + " ID: " + customers[i].ID);
                }
                MessageBox.Show("Customer successfully Added!");
            }
            catch (Exception Ex)
            {
                MessageBox.Show(Ex.ToString());
            }
        }

        private void buttonEditCustomer_Click(object sender, EventArgs e)
        {
            try
            {
                l.ModifyCustomer(int.Parse(textBoxCustomerSearch.Text), textBoxTitle.Text, textBoxForename.Text, textBoxSurname.Text, textBoxAddress.Text, textBoxEmail.Text, textBoxTelephoneNo.Text);
                
                customers = l.GetCustomers(null);

                listBoxCustomers.Items.Clear();
                for (int i = 0; i < customers.Count; i++)
                {
                    listBoxCustomers.Items.Add("Name: " + customers[i].Title + " " + customers[i].FirstName + " " + customers[i].Surname + " ID: " + customers[i].ID);
                }

                MessageBox.Show("Customer successfully Edited!");
            }
            catch (Exception Ex)
            {
                MessageBox.Show(Ex.ToString());
            }
        }

        private void buttonDeleteCustomer_Click(object sender, EventArgs e)
        {
            try
            {
                l.DeleteCustomer(int.Parse(textBoxCustomerSearch.Text));

                customers = l.GetCustomers(null);
                listBoxCustomers.Items.Clear();
                for (int i = 0; i < customers.Count; i++)
                {
                    listBoxCustomers.Items.Add("Name: " + customers[i].Title + " " + customers[i].FirstName + " " + customers[i].Surname + " ID: " + customers[i].ID);
                }
                MessageBox.Show("Customer successfully Deleted");
            }
            catch(Exception Ex)
            {
                MessageBox.Show(Ex.ToString());
            }
        }

        private void button1_Click(object sender, EventArgs e)
        {
            // Finding an individual customer
            try
            {
                l.GetCustomerById(int.Parse(textBoxCustomerSearch.Text));
                Customer A = l.GetCustomerById(int.Parse(textBoxCustomerSearch.Text));

                textBoxTitle.Text = A.Title;
                textBoxForename.Text = A.FirstName;
                textBoxSurname.Text = A.Surname;
                textBoxAddress.Text = A.Address;
                textBoxEmail.Text = A.Email;
                textBoxTelephoneNo.Text = A.TelephoneNumber;
                if (A.IsGoldClubMember == true)
                {
                    checkBoxGoldClub.Checked = true;
                }
            }
            catch(Exception Ex)
            {
                MessageBox.Show(Ex.ToString());
            }
        }
        #endregion

        #region Tickets

        // All ticket methods
        private void buttonTicketSearchTicketID_Click(object sender, EventArgs e)
        {

            // Shows individual ticket
            try
            {
                Ticket m = l.GetTicketById(int.Parse(textBoxTicketSearch.Text));

                reserveCustomerIDTB.Text = m.CustomerId.ToString();
                dateTimePickerReservation.Value = m.ReservationExpiryDate;
                payCustomerIDTB.Text = m.ID.ToString();
            }
            catch (Exception Ex)
            {
                MessageBox.Show(Ex.ToString());
            }
        }
        private void buttonTicketSearchTourID_Click(object sender, EventArgs e)
        {
            try
            {
                tickets = l.GetTicketsForTour(int.Parse(textBoxTicketSearch.Text));
                listBoxTickets.Items.Clear();
                for (int i = 0; i < tickets.Count; i++)
                {
                    listBoxTickets.Items.Add("ID: " + tickets[i].ID + " Sold: " + tickets[i].IsSold + " Reserved: " + tickets[i].IsReserved + " Reservation Expires: " + tickets[i].ReservationExpiryDate + " Price: " + tickets[i].SalePrice + " Tour ID: " + tickets[i].TourID);
                }
            }
            catch (Exception Ex)
            {
                MessageBox.Show(Ex.ToString());
            }
        }
        private void buttonTicketSearchCustomerID_Click(object sender, EventArgs e)
        {
            try
            {
                tickets = l.GetTicketsByCustomerId(int.Parse(textBoxTicketSearch.Text));

                listBoxTickets.Items.Clear();
                for (int i = 0; i < tickets.Count; i++)
                {
                    listBoxTickets.Items.Add("ID: " + tickets[i].ID + " Sold: " + tickets[i].IsSold + " Reserved: " + tickets[i].IsReserved + " Reservation Expires: " + tickets[i].ReservationExpiryDate + " Price: " + tickets[i].SalePrice + " Tour ID: " + tickets[i].TourID);
                }
            }
            catch (Exception Ex)
            {
                MessageBox.Show(Ex.ToString());
            }
        }
        private void buttonBookTicket_Click_1(object sender, EventArgs e)
        {
            try
            {
                l.BuyTicket(int.Parse(BuyTicketTourID.Text), int.Parse(bookCustomerIDTB.Text), double.Parse(PricePaidTB.Text));
                MessageBox.Show("Ticket successfully Booked!");
            }
            catch (Exception Ex)
            {
                MessageBox.Show(Ex.ToString());
            }
        }
        private void buttonReserveTicket_Click(object sender, EventArgs e)
        {
            try
            {
                l.ReserveTicket(int.Parse(TicketTourID.Text), int.Parse(reserveCustomerIDTB.Text), dateTimePickerReservation.Value);
                MessageBox.Show("Ticket successfully Reserved!");
            }
            catch (Exception Ex)
            {
                MessageBox.Show(Ex.ToString());
            }
        }
        private void button1_Click_1(object sender, EventArgs e)
        {
            try
            {
                l.PayForReservedTicket(int.Parse(payCustomerIDTB.Text), double.Parse(textBox2.Text));
                MessageBox.Show("Reserved ticket successfully payed for.");
            }
            catch(Exception Ex)
            {
                MessageBox.Show(Ex.ToString());
            }
        }
        private void buttonBookTicket_Click(object sender, EventArgs e)
        {
            try
            {
                l.BuyTicket(int.Parse(TourIDTB.Text), int.Parse(bookCustomerIDTB.Text), double.Parse(PricePaidTB.Text));
                MessageBox.Show("Ticket successfully Booked!");
            }
            catch (Exception Ex)
            {
                MessageBox.Show(Ex.ToString());
            }
        }
        #endregion

        #region Coaches

        // All coach methods
        private void buttonAddCoach_Click(object sender, EventArgs e)
        {
            try
            {
                l.AddCoach(int.Parse(textBox4.Text), textBox5.Text);
            }
            catch (Exception Ex)
            {
                MessageBox.Show(Ex.ToString());
            }
        }
        private void buttonCoach_Click(object sender, EventArgs e)
        {
            try
            {
                l.DeleteCoach(int.Parse(CoachIDTB.Text));
            }
            catch(Exception Ex)
            {
                MessageBox.Show(Ex.ToString());
            }
        }
        #endregion

        private void listBoxTours_DoubleClick(object sender, EventArgs e)
        {
            string k = e.ToString();

            Tour p = tours.Find(x => x.Title == k);

            textBoxTourName.Text = p.Title;
            richTextBoxTourDescription.Text = p.Description;
            dateTimePickerTourDate.Value = p.DepartureDateTime;
            textBoxCoachID.Text = p.CoachID.ToString();
            textBoxBaseTicketPrice.Text = p.BaseTicketPrice.ToString();
        }
    }

}
